import telebot
from telebot import types
import json
from razdel import tokenize
import random
import requests
from bs4 import BeautifulSoup

if __name__ == "__main__":
    TOKEN = str(input('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞:'))

bot = telebot.TeleBot(TOKEN)
print('–¢–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç!')
f = open('diseases.json', encoding='utf-8')
diseases_json = json.load(f)
print('JSON-—Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!')

print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...')


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç—Å–∫–∏—Ö "
                                           "–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –ø–æ —Å–∏–º–ø—Ç–æ–º–∞–º!", reply_markup=markup)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞')
        btn2 = types.KeyboardButton('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥')
        btn3 = types.KeyboardButton('–°–ª—É—á–∞–π–Ω–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ')
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.from_user.id, '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å', reply_markup=markup)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞

    elif message.text == '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞':
        bot.send_message(message.from_user.id, '–ú–æ—è –±–∞–∑–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –ø–æ–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∫—Ä–æ–º–Ω–∞—è, —è –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å: \n'
                                               '- –í–µ—Ç—Ä—è–Ω–∫—É, \n'
                                               '- –°–∫–∞—Ä–ª–∞—Ç–∏–Ω—É, \n'
                                               '- –ö—Ä–∞—Å–Ω—É—Ö—É, \n'
                                               '- –ê–Ω–≥–∏–Ω—É, \n'
                                               '- –ì—Ä–∏–ø–ø –∏ –û–†–í–ò', parse_mode='markdown')
        user_symptoms = bot.send_message(message.from_user.id,
                                         '–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–∏–º–ø—Ç–æ–º–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ *—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—ã–µ*',
                                         parse_mode='markdown')
        bot.register_next_step_handler(user_symptoms, diagnostics)

    elif message.text == '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥':
        bot.send_message(message.from_user.id,
                         '–î–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.'
                         '\n –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n'
                         '- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –í—ã –ø—Ä–∏—Å—ã–ª–∞–µ—Ç–µ –±–æ—Ç—É —Å–ø–∏—Å–æ–∫ —Å–∏–º–ø—Ç–æ–º–æ–≤ –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞, –∞ –±–æ—Ç –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –í–∞–º,'
                         '—á—Ç–æ –∑–∞ –±–æ–ª–µ–∑–Ω–∏ —ç—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å \n'
                         '- –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ - –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –±–æ—Ç–∞ \n'
                         '- –°–ª—É—á–∞–π–Ω–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ - –≤—ã–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª—É—á–∞–π–Ω–æ–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–∏',
                         parse_mode='Markdown')

    elif message.text == '–°–ª—É—á–∞–π–Ω–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ':
        bot.send_message(message.from_user.id,
                         '–°–ª—É—á–∞–π–Ω–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ –≤–∑—è—Ç–æ —Å ' +
                         '[—Å–∞–π—Ç–∞](https://www.smdoctor.ru/disease/)',
                         parse_mode='Markdown')
        bot.send_message(message.from_user.id, random_disease())


def diagnostics(user_message):
    bot.reply_to(user_message, text='–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞...')
    if ',' in [user_message]:
        user_tokens = tokenization(user_message)
        user_diseases = diagnose(user_tokens)
    else:
        user_diseases = diagnose(user_message)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    btn1 = types.KeyboardButton('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞')
    btn2 = types.KeyboardButton('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥')
    btn3 = types.KeyboardButton('–°–ª—É—á–∞–π–Ω–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ')
    markup.add(btn1, btn2, btn3)
    if user_diseases is not None:
        bot.send_message(user_message.from_user.id,
                         '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –±–æ–ª–µ–∑–Ω–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É —Ä–µ–±–µ–Ω–∫–∞: ' + ', '.join(user_diseases.split()),
                         reply_markup=markup)
    else:
        bot.send_message(user_message.from_user.id,
                         '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –ø–æ –í–∞—à–∏–º —Å–∏–º–ø—Ç–æ–º–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢',
                         reply_markup=markup)


def diagnose(user_symptoms) -> str:
    # print(user_symptoms)
    user_symptoms = user_symptoms.text  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ JSON, –∫–æ—Ç–æ—Ä—ã–º —è–≤–ª—è–µ—Ç—Å—è message, –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    possible_user_diseases = []
    user_symptoms = user_symptoms.lower()
    print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã: ---------', user_symptoms)
    for user_symptom in user_symptoms.split(' '):
        for disease in diseases_json.keys():
            for symptom_sentence in diseases_json[disease]:
                for symptom_tokenized in [symptom_sentence.split(' ')]:
                    if symptom_tokenized[0].lower() == user_symptom:
                        print('–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–∏–º—Ç–æ–º—ã:', symptom_tokenized, user_symptom)
                        if disease not in possible_user_diseases:
                            possible_user_diseases.append(disease)
    print(' '.join(possible_user_diseases))

    if not possible_user_diseases:
        return None

    return ' '.join(possible_user_diseases)


def tokenization(msg: str) -> list:
    tokens = list(tokenize(msg))
    return [_.text for _ in tokens]


def random_disease() -> str:
    intro_message = '–û—à–∏–±–∫–∞...'
    user_random_number = random.randint(0, 342)
    smdoctor_child_diseases_webpage = requests.get('https://www.smdoctor.ru/disease/')

    soup = BeautifulSoup(smdoctor_child_diseases_webpage.text, 'html.parser')
    html_diseases = soup.find('div', class_='b-diseases-list__items')
    diseases = html_diseases.find_all('a')
    print(diseases)
    print(len(diseases))
    user_random_disease = diseases[user_random_number]
    user_random_disease_url = 'https://www.smdoctor.ru' + user_random_disease['href']
    print(user_random_number, user_random_disease.text, user_random_disease_url)
    random_disease_webpage = requests.get(user_random_disease_url)
    disease_soup = BeautifulSoup(random_disease_webpage.text, 'html.parser')
    disease_intro = disease_soup.find('div', class_='b-inner-intro__text text')
    disease_name = user_random_disease.text
    for ptag in disease_intro.find_all('p'):
        intro_message = ' '.join(ptag)

    return disease_name + '\n' + intro_message


bot.polling(none_stop=True, interval=0)  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —á–∞—Å—Ç—å
